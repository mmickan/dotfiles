snippet class
#
# == Class: ${1:class name}
#
# ${2:Full description of class.}
#
# === Parameters
#
# [*${3:parameter_name}*]
#   ${4:Explanation of what this parameter affects and whit is defaults to.}
#
# === Variables
#
# [*${5:variable_name}*]
#   ${6:Explanation of how this variable affects the function of this class
#   and if it has a default}
#
# === Example usage
#
#  class { '$1':
#    $3 => '${7:$3 value}',
#  }
#
class $1 {

  $0

}
endsnippet

snippet define
#
# == Define: ${1:resource name}
#
# ${2:Full description of defined resource type.}
#
# === Parameters
#
# [*${3:namevar}*]
#   ${4:If there is a parameter that defaults to the value of the title
#   string when not explicitly set, you must always say so.  This parameter
#   can be referred to as a "namevar" since its functionally equivalent to
#   the namevar of a core resource type}
#
# [*${5:parameter_name}*]
#   ${6:Description of this parameter.}
#
# === Example usage
#
#  $1 { '${7:$3}':
#    $5 => '${8:$5 value}',
#  }
#
define $1(\$$5) {

  $0

}
endsnippet

snippet profile
#
# == Class: profile::${1:`!p snip.rv = snip.fn.replace(".pp", "")`}
#
# ${2:Full description of class.}
#
# === Parameters
#
# Profile classes do not take parameters.
#
# === Example usage
#
# The class should only be used by a role class:
#
#  include profile::$1
#
class profile::$1 {

  $0

}
endsnippet

snippet role
#
# == Class: role::${1:`!p snip.rv = snip.fn.replace(".pp", "")`}
#
# ${2:Full description of class.}
#
# === Parameters
#
# Role classes do not take parameters.
#
# === Example usage
#
#  node 'myserver' {
#    include role::$1
#  }
#
class role::$1 inherits role {

  $0

}
endsnippet
